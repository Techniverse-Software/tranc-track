{"version":3,"sources":["./src/app/views/auth/rest-password/rest-password.component.scss","./src/app/views/auth/login/login.component.ts","./src/app/views/auth/forgot-password/forgot-password.component.ts","./src/app/views/auth/forgot-password/forgot-password.component.html","./src/app/views/auth/auth.module.ts","./src/app/views/auth/rest-password/rest-password.component.html","./src/app/views/auth/rest-password/rest-password.component.ts","./src/app/views/auth/verify-otp/verify-otp.component.html","./src/app/views/auth/login/login.component.html","./src/app/views/auth/forgot-password/forgot-password.component.scss","./src/app/views/auth/login/login.component.scss","./src/app/views/auth/verify-otp/verify-otp.component.ts","./src/app/views/auth/verify-otp/verify-otp.component.scss"],"names":[],"mappings":"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","file":"views-auth-auth-module-es2015.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZXN0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../../services/auth.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { Router } from \"@angular/router\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n})\nexport class LoginComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  loginForm: FormGroup;\n  submitted = false;\n  passwordType = \"password\";\n  passwordIcon = \"fa fa-eye-slash\";\n  formErrors: any;\n  loading: boolean = false;\n  response: any = null;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private authService: AuthService,\n    private router: Router,\n    public gs: GlobalService,\n    private httpReqService: HttpReqService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.gs.resMassage.massage = null;\n  }\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.loginForm = this.fb.group({\n      email: [\n        \"\",\n        [Validators.required, Validators.pattern(this.vf.formRules.email)],\n      ],\n      password: [\n        \"\",\n        [\n          Validators.required,\n          // Validators.minLength(this.vf.formRules.passwordMin),\n          // Validators.pattern(this.vf.formRules.passwordPattern),\n        ],\n      ],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.loginForm.status === \"VALID\";\n  }\n\n  togglePassword() {\n    this.passwordType = this.passwordType === \"password\" ? \"text\" : \"password\";\n    this.passwordIcon =\n      this.passwordIcon === \"fa fa-eye-slash\" ? \"fa fa-eye\" : \"fa fa-eye-slash\";\n  }\n\n  async onSubmit() {\n    this.loading = true;\n    this.gs.resMassage.massage = '';\n    if (this.onValidate()) {\n      const response: any = await this.httpReqService.post(\n        \"users/login\",\n        this.loginForm.value,\n        true\n      );\n      //console.log(response);\n      this.response = response;\n      if (response && response.status === 1) {\n        localStorage.setItem(\"accessToken\", response.items.token);\n        const decoded: any = this.authService.decodeToken();\n        const obj = {\n          name: decoded.user.name,\n          // permissionId: decoded.user.permissionId\n        };\n        if (response.items.image) {\n          obj[\"image\"] = response.items.image;\n        }\n        localStorage.setItem(\"currentUser\", JSON.stringify(obj));\n        this.authService.currentUserSubjet(response.items.token);\n        this.gs.resMassage.massage = response.message;\n        this.gs.resMassage.status = \"success\";\n        this.httpReqService.hideMassege();\n        setTimeout(() => {\n          this.router.navigate([\"dashboard\"]);\n        }, 1000);\n      } else {\n        this.loading = false;\n        this.gs.resMassage.massage = response.message;\n        this.gs.resMassage.status = \"error\";\n      }\n    }\n    this.loading = false;\n  }\n}\n","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n  styleUrls: [\"./forgot-password.component.scss\"],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  forgotPswForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private router: Router,\n    private httpReqService: HttpReqService,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {}\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.forgotPswForm = this.fb.group({\n      email: [\n        \"\",\n        [Validators.required, Validators.pattern(this.vf.formRules.email)],\n      ],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.forgotPswForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.forgotPswForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      const response: any = await this.httpReqService.post(\n        \"users/forgotPassword\",\n        this.forgotPswForm.value,\n        true\n      );\n      if (response && response.status == 1) {\n        localStorage.setItem(\n          \"email\",\n          JSON.stringify(this.forgotPswForm.value.email)\n        );\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"success\";\n        this.httpReqService.hideMassege();\n        setTimeout(() => {\n          this.router.navigate([\"auth/verify-otp\"]);\n        }, 1000);\n      } else {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"error\";\n        window.scroll(0, 0);\n      }\n      // if (response) {\n      // localStorage.setItem('accessToken', response.items.token);\n      // const decoded: any = jwt_decode(response.items.token);\n      // const obj = {\n      //   name: decoded.user.name\n      // };\n      // this.authService.currentUserSubjet(response.items.token);\n      // }\n    }\n  }\n}\n","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form [formGroup]=\\\"forgotPswForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n              <h1>Forgot your password?</h1>\\n              <p class=\\\"text-muted\\\">Enter your email below to receive a one-time 5 digit passcode. This will be needed to recover your password</p>\\n              <div class=\\\"input-group mb-3\\\">\\n                <!-- <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\">\\n                        <c-icon name=\\\"cil-user\\\" size=\\\"sm\\\"></c-icon>\\n                      </span>\\n                    </div> -->\\n                <input cInput placeholder=\\\"Email\\\" autocomplete=\\\"Email\\\" required formControlName=\\\"email\\\"\\n                  [ngClass]=\\\"{ 'is-invalid':  (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['email'].errors.required\\\">{{formErrors.email.required}}</div>\\n                  <div *ngIf=\\\"f['email'].errors.pattern\\\">{{formErrors.email.email}}</div>\\n                </div>\\n                \\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button cButton color=\\\"primary\\\" class=\\\"px-4\\\" type=\\\"submit\\\" [disabled]=\\\"false\\\">Send</button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button cButton color=\\\"link\\\" class=\\\"px-0\\\" routerLink=\\\"/auth/login\\\">Return to Login</button>\\n                </c-col>\\n              </c-row>\\n            </form>\\n            <div\\n              [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n              {{gs.resMassage.massage || ''}}\\n            </div>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\";","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RouterModule } from \"@angular/router\";\nimport { NgOtpInputModule } from \"ng-otp-input\";\n\n// CoreUI\nimport {\n  ButtonModule,\n  CardModule,\n  FormModule,\n  GridModule,\n  SpinkitModule,\n} from \"@coreui/angular\";\nimport { IconModule } from \"@coreui/icons-angular\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ForgotPasswordComponent } from \"./forgot-password/forgot-password.component\";\nimport { VerifyOtpComponent } from \"./verify-otp/verify-otp.component\";\nimport { RestPasswordComponent } from \"./rest-password/rest-password.component\";\n\nconst routes = [\n  {\n    path: \"\",\n    data: {\n      title: \"Forms\",\n    },\n    children: [\n      {\n        path: \"\",\n        redirectTo: \"login\",\n      },\n      {\n        path: \"login\",\n        component: LoginComponent,\n      },\n      {\n        path: \"forgot-password\",\n        component: ForgotPasswordComponent,\n      },\n      {\n        path: \"verify-otp\",\n        component: VerifyOtpComponent,\n      },\n      {\n        path: \"verify-otp/:id\",\n        component: VerifyOtpComponent,\n      },\n      {\n        path: \"reset-password\",\n        component: RestPasswordComponent,\n      },\n    ],\n  },\n];\n@NgModule({\n  declarations: [\n    LoginComponent,\n    ForgotPasswordComponent,\n    VerifyOtpComponent,\n    RestPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ButtonModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SpinkitModule,\n    // ToastrModule.forRoot(),\n    // ToastContainerModule,\n    FormModule,\n    ReactiveFormsModule,\n    NgOtpInputModule,\n  ],\n})\nexport class AuthModule {}\n","export default \"<c-container>\\n    <c-row class=\\\"justify-content-center\\\">\\n        <c-col md=\\\"6\\\">\\n            <c-card-group>\\n                <c-card class=\\\"p-4\\\">\\n                    <c-card-body>\\n                        <form [formGroup]=\\\"resetPasswordForm\\\" novalidate class=\\\"needs-validation\\\">\\n                            <h1>Create Password</h1>\\n                            <div class=\\\"input-group mb-3\\\">\\n                                <input cInput id=\\\"name\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\"\\n                                    placeholder=\\\"New Password\\\"\\n                                    [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\">\\n\\n                                <div class=\\\"input-group-append\\\">\\n                                    <span class=\\\"input-group-text\\\">\\n                                        <i [class]=\\\"passwordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"togglePassword()\\\"></i>\\n                                    </span>\\n                                </div>\\n                                <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                    <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                                    <div *ngIf=\\\"f['password'].errors.minlength\\\">\\n                                        {{formErrors.password.minLength}}</div>\\n                                    <div *ngIf=\\\"f['password'].errors.pattern\\\">\\n                                        {{formErrors.password.pattern}}</div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"input-group mb-3\\\">\\n                                <input cInput id=\\\"cPassword\\\" formControlName=\\\"confirmPassword\\\" [type]=\\\"cPasswordType\\\"\\n                                    placeholder=\\\"Confirm New Password\\\"\\n                                    [ngClass]=\\\"{ 'is-invalid': submitted && resetPasswordForm.errors, 'is-valid': f.confirmPassword.touched && !resetPasswordForm.errors }\\\">\\n\\n                                <div class=\\\"input-group-append\\\">\\n                                    <span class=\\\"input-group-text\\\">\\n                                        <i [class]=\\\"cPasswordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"cTogglePassword()\\\"></i>\\n                                    </span>\\n                                </div>\\n                                <div *ngIf=\\\"submitted && resetPasswordForm.errors\\\" class=\\\"invalid-feedback d-block\\\">\\n                                    <div *ngIf=\\\"resetPasswordForm.errors['passwordMismatch']\\\">\\n                                        {{formErrors.confirmPassword.passwordMismatch}}</div>\\n                                </div>\\n                            </div>\\n                            <c-row>\\n                                <c-col col=\\\"6\\\">\\n                                    <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\"\\n                                        (click)=\\\"onSubmit()\\\">\\n                                        <span> Reset Password</span>\\n                                    </button>\\n                                </c-col>\\n                            </c-row>\\n                            <div\\n                                [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n                                {{gs.resMassage.massage || ''}}\\n                            </div>\\n                        </form>\\n                    </c-card-body>\\n                </c-card>\\n            </c-card-group>\\n        </c-col>\\n    </c-row>\\n</c-container>\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { Router } from \"@angular/router\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from \"@angular/forms\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get(\"password\");\n  const confirm = control.get(\"confirmPassword\");\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: \"app-rest-password\",\n  templateUrl: \"./rest-password.component.html\",\n  styleUrls: [\"./rest-password.component.scss\"],\n})\nexport class RestPasswordComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  resetPasswordForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  passwordType = \"password\";\n  passwordIcon = \"fa fa-eye-slash\";\n  cPasswordType = \"password\";\n  cPasswordIcon = \"fa fa-eye-slash\";\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private httpReqService: HttpReqService,\n    private router: Router,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {}\n\n  createForm() {\n    this.resetPasswordForm = this.fb.group(\n      {\n        password: [\n          \"\",\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: [\"\", [Validators.required]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n    // stop here if form is invalid\n    return this.resetPasswordForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      const authData = {\n        password: this.resetPasswordForm.value.password,\n        confirmPassword: this.resetPasswordForm.value.confirmPassword,\n        email: JSON.parse(localStorage.getItem(\"email\")),\n      };\n      this.resetPasswordForm.value.email = JSON.parse(\n        localStorage.getItem(\"email\")\n      );\n      const response: any = await this.httpReqService.post(\n        \"users/resetPassword\",\n        this.resetPasswordForm.value,\n        true\n      );\n      if (response && response.status == 1) {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"success\";\n        this.httpReqService.hideMassege();\n        this.resetPasswordForm.reset();\n        this.submitted = false;\n        localStorage.removeItem(\"email\");\n        setTimeout(() => {\n          this.router.navigate([\"auth/login\"]);\n        }, 1000);\n      } else {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"error\";\n        window.scroll(0, 0);\n      }\n      // this.resetPasswordForm.value.email = localStorage.getItem('email');\n      // const response: any = await this.httpReqService.post('users/changePassword', this.resetPasswordForm.value, true);\n      // if (response) {\n      //   this.resetPasswordForm.reset();\n      //   this.submitted = false;\n      // }\n    }\n  }\n\n  togglePassword() {\n    this.passwordType = this.passwordType === \"password\" ? \"text\" : \"password\";\n    this.passwordIcon =\n      this.passwordIcon === \"fa fa-eye-slash\" ? \"fa fa-eye\" : \"fa fa-eye-slash\";\n  }\n\n  cTogglePassword() {\n    this.cPasswordType =\n      this.cPasswordType === \"password\" ? \"text\" : \"password\";\n    this.cPasswordIcon =\n      this.cPasswordIcon === \"fa fa-eye-slash\"\n        ? \"fa fa-eye\"\n        : \"fa fa-eye-slash\";\n  }\n\n  // submit() {\n  //   this.submitted = true;\n  //   if (this.onValidate()) {\n  //     const authData = {\n  //       password: this.resetPasswordForm.value.password,\n  //       confirm_password: this.resetPasswordForm.value.confirmPassword,\n  //       email: localStorage.getItem('email'),\n  //     };\n  //     const response: any = this.httpReqService.post('users/resetPassword', authData, true);\n  //     if (response) {\n  //       this.router.navigate(['auth/login']);\n  //     }\n  //   }\n  // }\n}\n","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form\\n              [formGroup]=\\\"verifyOtpForm\\\"\\n              novalidate\\n              (ngSubmit)=\\\"onSubmit()\\\"\\n              class=\\\"needs-validation\\\"\\n            >\\n              <h3>Please enter 5 digit passcode that was sent to your mail</h3>\\n              <div class=\\\"input-group mb-3\\\">\\n                <ng-otp-input\\n                  class=\\\"text-center\\\"\\n                  (onInputChange)=\\\"onOtpChange($event)\\\"\\n                  [config]=\\\"{ length: 5 }\\\"\\n                >\\n                </ng-otp-input>\\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"primary\\\"\\n                    class=\\\"px-4\\\"\\n                    type=\\\"submit\\\"\\n                    [disabled]=\\\"false\\\"\\n                  >\\n                    Verify\\n                  </button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"link\\\"\\n                    class=\\\"px-0\\\"\\n                    (click)=\\\"resendOtp()\\\"\\n                  >\\n                    Resend Passcode\\n                  </button>\\n                </c-col>\\n              </c-row>\\n              <div\\n                [ngClass]=\\\"{\\n                  errorRes: gs.resMassage.status == 'error',\\n                  succassRes: gs.resMassage.status == 'success'\\n                }\\\"\\n              >\\n                {{ gs.resMassage.massage || \\\"\\\" }}\\n              </div>\\n            </form>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\";","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form\\n              [formGroup]=\\\"loginForm\\\"\\n              novalidate\\n              (ngSubmit)=\\\"onSubmit()\\\"\\n              class=\\\"needs-validation\\\"\\n            >\\n              <h1>Welcome to tracdisc!</h1>\\n              <p class=\\\"text-muted\\\">Please login to your account</p>\\n              <div class=\\\"input-group mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <c-icon name=\\\"cil-envelope-closed\\\" size=\\\"sm\\\"></c-icon>\\n                  </span>\\n                </div>\\n                <input\\n                  cInput\\n                  placeholder=\\\"Email\\\"\\n                  autocomplete=\\\"Email\\\"\\n                  required\\n                  formControlName=\\\"email\\\"\\n                  [ngClass]=\\\"{\\n                    'is-invalid':\\n                      (submitted || f.email.touched) && f.email.invalid,\\n                    'is-valid': f.email.touched && f.email.valid\\n                  }\\\"\\n                />\\n                <div\\n                  *ngIf=\\\"submitted && f['email'].invalid\\\"\\n                  class=\\\"invalid-feedback\\\"\\n                >\\n                  <div *ngIf=\\\"f['email'].errors.required\\\">\\n                    {{ formErrors.email.required }}\\n                  </div>\\n                  <div *ngIf=\\\"f['email'].errors.pattern\\\">\\n                    {{ formErrors.email.email }}\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"input-group mb-4\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <c-icon name=\\\"cil-lock-locked\\\"></c-icon>\\n                  </span>\\n                </div>\\n                <input\\n                  cInput\\n                  type=\\\"password\\\"\\n                  [type]=\\\"passwordType\\\"\\n                  placeholder=\\\"Password\\\"\\n                  autocomplete=\\\"current-password\\\"\\n                  required\\n                  formControlName=\\\"password\\\"\\n                  [ngClass]=\\\"{\\n                    'is-invalid':\\n                      ((submitted || f.password.touched) && f.password.invalid) || (response && gs.resMassage.massage && gs.resMassage.status == 'error')\\n                  }\\\"\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <i\\n                      [class]=\\\"passwordIcon\\\"\\n                      aria-hidden=\\\"true\\\"\\n                      (click)=\\\"togglePassword()\\\"\\n                    ></i>\\n                  </span>\\n                </div>\\n                <div\\n                  *ngIf=\\\"submitted && f['password'].invalid\\\"\\n                  class=\\\"invalid-feedback\\\"\\n                >\\n                  <div *ngIf=\\\"f['password'].errors.required\\\">\\n                    Password is required\\n                  </div>\\n                  <div *ngIf=\\\"f['password'].errors.minlength\\\">\\n                    {{ formErrors.password.minLength }}\\n                  </div>\\n                  <div *ngIf=\\\"f['password'].errors.pattern\\\">\\n                    {{ formErrors.password.pattern }}\\n                  </div>\\n                </div>\\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"primary\\\"\\n                    class=\\\"px-4\\\"\\n                    type=\\\"submit\\\"\\n                    [disabled]=\\\"false\\\"\\n                  >\\n                    Login\\n                  </button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"link\\\"\\n                    class=\\\"px-0\\\"\\n                    routerLink=\\\"/auth/forgot-password\\\"\\n                  >\\n                    Forgot password?\\n                  </button>\\n                </c-col>\\n              </c-row>\\n            </form>\\n            <div\\n              [ngClass]=\\\"{\\n                errorRes: gs.resMassage.status == 'error',\\n                succassRes: gs.resMassage.status == 'success'\\n              }\\\"\\n            >\\n              {{ response ? gs.resMassage.massage : \\\"\\\" }}\\n            </div>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\\n<div class=\\\"loading-indicator\\\" *ngIf=\\\"loading\\\">\\n  <c-spinkit [name]=\\\"'bounce'\\\"></c-spinkit>\\n</div>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-verify-otp\",\n  templateUrl: \"./verify-otp.component.html\",\n  styleUrls: [\"./verify-otp.component.scss\"],\n})\nexport class VerifyOtpComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  otp: any;\n  verifyOtpForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private httpReqService: HttpReqService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n    if (this.route.snapshot.params.id) {\n      console.log(this.route.snapshot.params.id);\n      var current_date = new Date(Date.now());\n      var email_token = this.route.snapshot.params.id;\n      var json = this.getIDFromEmailToken(email_token);\n\n      var difference = current_date.getTime() - json.milli_seconds;\n      difference = difference / (3600 * 60 * 24);\n      if (difference > 5) {\n        this.router.navigate([\"auth/login\"]);\n      } else {\n        this.check_valid_link(json);\n      }\n    }\n  }\n\n  getIDFromEmailToken(email_token) {\n    var server_token = \"\",\n      id = \"\",\n      milli = \"\";\n    var milli_seconds = 0;\n    var length = 30; // 13 milli seconds so * 2 => 26\n\n    var milli_token = email_token.substr(0, length);\n    var id_token = email_token.substr(length);\n\n    for (var i = 0; i < length; i++) {\n      if (i % 2 == 0) {\n        milli = milli + milli_token.charAt(i);\n      } else {\n        server_token = server_token + milli_token.charAt(i);\n      }\n    }\n\n    milli = milli.split(\"\").reverse().join(\"\");\n    milli_seconds = parseInt(milli);\n\n    length = id_token.length;\n    for (var i = 0; i < length; i++) {\n      if (i % 2 == 0) {\n        id = id + id_token.charAt(i);\n      } else {\n        server_token = server_token + id_token.charAt(i);\n      }\n    }\n    return { id: id, server_token: server_token, milli_seconds: milli_seconds };\n  }\n\n  async check_valid_link(json) {\n    const response: any = await this.httpReqService.post(\n      \"users/check_valid_detail\",\n      json,\n      true\n    );\n    if (response.items && response.items.email) {\n      this.gs.resMassage.massage = '';\n      localStorage.setItem(\"email\", JSON.stringify(response.items.email));\n\n    } else {\n      this.router.navigate([\"auth/login\"]);\n    }\n  }\n\n  onOtpChange(otp) {\n    this.otp = otp;\n  }\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.verifyOtpForm = this.fb.group({\n      otp: [\"\", [Validators.required]],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.verifyOtpForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.verifyOtpForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (!this.otp) {\n      return;\n    }\n    const obj = {\n      otp: this.otp,\n      email: JSON.parse(localStorage.getItem(\"email\")),\n    };\n    // if (this.onValidate()) {\n    const response: any = await this.httpReqService.post(\n      \"users/verifyOtp\",\n      obj,\n      true\n    );\n    if (response && response.status == 1) {\n      this.gs.resMassage.message = response.message;\n      this.gs.resMassage.message = \"success\";\n      this.httpReqService.hideMassege();\n      setTimeout(() => {\n        this.router.navigate([\"auth/reset-password\"]);\n      }, 1000);\n      // localStorage.setItem('accessToken', response.items.token);\n      // const decoded: any = jwt_decode(response.items.token);\n      // const obj = {\n      //   name: decoded.user.name\n      // };\n      // localStorage.setItem('currentUser', JSON.stringify(obj));\n      // this.authService.currentUserSubjet(response.items.token);\n    } else {\n      this.gs.resMassage.message = response.message;\n      this.gs.resMassage.message = \"error\";\n      window.scroll(0, 0);\n    }\n    // }\n  }\n\n  resendOtp() {\n    const obj = { email: JSON.parse(localStorage.getItem(\"email\")) };\n    const response: any = this.httpReqService.post(\n      \"users/forgotPassword\",\n      obj,\n      true\n    );\n    if (response) {\n      // this.router.navigate(['auth/reset-password']);\n    }\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2ZXJpZnktb3RwLmNvbXBvbmVudC5zY3NzIn0= */\";"],"sourceRoot":"webpack:///"}