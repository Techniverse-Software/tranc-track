{"version":3,"sources":["webpack:///src/app/views/auth/rest-password/rest-password.component.scss","webpack:///src/app/views/auth/login/login.component.ts","webpack:///src/app/views/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/views/auth/forgot-password/forgot-password.component.html","webpack:///src/app/views/auth/auth.module.ts","webpack:///src/app/views/auth/rest-password/rest-password.component.html","webpack:///src/app/views/auth/rest-password/rest-password.component.ts","webpack:///src/app/views/auth/verify-otp/verify-otp.component.html","webpack:///src/app/views/auth/login/login.component.html","webpack:///src/app/views/auth/forgot-password/forgot-password.component.scss","webpack:///src/app/views/auth/login/login.component.scss","webpack:///src/app/views/auth/verify-otp/verify-otp.component.ts","webpack:///src/app/views/auth/verify-otp/verify-otp.component.scss"],"names":["LoginComponent","fb","vf","authService","router","gs","httpReqService","cAppClass","submitted","passwordType","passwordIcon","loading","response","clearMassage","formErrors","errorMessages","createForm","resMassage","massage","loginForm","group","email","required","pattern","formRules","password","controls","status","onValidate","post","value","localStorage","setItem","items","token","decoded","decodeToken","obj","name","user","image","JSON","stringify","currentUserSubjet","message","hideMassege","setTimeout","navigate","selector","template","ForgotPasswordComponent","forgotPswForm","window","scroll","routes","path","data","title","children","redirectTo","component","AuthModule","declarations","imports","forChild","confirmPasswordValidator","control","get","confirm","passwordMismatch","RestPasswordComponent","cPasswordType","cPasswordIcon","resetPasswordForm","minLength","passwordMin","passwordPattern","confirmPassword","validators","authData","parse","getItem","reset","removeItem","VerifyOtpComponent","route","snapshot","params","id","console","log","current_date","Date","now","email_token","json","getIDFromEmailToken","difference","getTime","milli_seconds","check_valid_link","server_token","milli","length","milli_token","substr","id_token","i","charAt","split","reverse","join","parseInt","otp","verifyOtpForm"],"mappings":"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","file":"views-auth-auth-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZXN0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../../services/auth.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { Router } from \"@angular/router\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n})\nexport class LoginComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  loginForm: FormGroup;\n  submitted = false;\n  passwordType = \"password\";\n  passwordIcon = \"fa fa-eye-slash\";\n  formErrors: any;\n  loading: boolean = false;\n  response: any = null;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private authService: AuthService,\n    private router: Router,\n    public gs: GlobalService,\n    private httpReqService: HttpReqService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.gs.resMassage.massage = null;\n  }\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.loginForm = this.fb.group({\n      email: [\n        \"\",\n        [Validators.required, Validators.pattern(this.vf.formRules.email)],\n      ],\n      password: [\n        \"\",\n        [\n          Validators.required,\n          // Validators.minLength(this.vf.formRules.passwordMin),\n          // Validators.pattern(this.vf.formRules.passwordPattern),\n        ],\n      ],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.loginForm.status === \"VALID\";\n  }\n\n  togglePassword() {\n    this.passwordType = this.passwordType === \"password\" ? \"text\" : \"password\";\n    this.passwordIcon =\n      this.passwordIcon === \"fa fa-eye-slash\" ? \"fa fa-eye\" : \"fa fa-eye-slash\";\n  }\n\n  async onSubmit() {\n    this.loading = true;\n    this.gs.resMassage.massage = '';\n    if (this.onValidate()) {\n      const response: any = await this.httpReqService.post(\n        \"users/login\",\n        this.loginForm.value,\n        true\n      );\n      //console.log(response);\n      this.response = response;\n      if (response && response.status === 1) {\n        localStorage.setItem(\"accessToken\", response.items.token);\n        const decoded: any = this.authService.decodeToken();\n        const obj = {\n          name: decoded.user.name,\n          // permissionId: decoded.user.permissionId\n        };\n        if (response.items.image) {\n          obj[\"image\"] = response.items.image;\n        }\n        localStorage.setItem(\"currentUser\", JSON.stringify(obj));\n        this.authService.currentUserSubjet(response.items.token);\n        this.gs.resMassage.massage = response.message;\n        this.gs.resMassage.status = \"success\";\n        this.httpReqService.hideMassege();\n        setTimeout(() => {\n          this.router.navigate([\"dashboard\"]);\n        }, 1000);\n      } else {\n        this.loading = false;\n        this.gs.resMassage.massage = response.message;\n        this.gs.resMassage.status = \"error\";\n      }\n    }\n    this.loading = false;\n  }\n}\n","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n  styleUrls: [\"./forgot-password.component.scss\"],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  forgotPswForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private router: Router,\n    private httpReqService: HttpReqService,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {}\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.forgotPswForm = this.fb.group({\n      email: [\n        \"\",\n        [Validators.required, Validators.pattern(this.vf.formRules.email)],\n      ],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.forgotPswForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.forgotPswForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      const response: any = await this.httpReqService.post(\n        \"users/forgotPassword\",\n        this.forgotPswForm.value,\n        true\n      );\n      if (response && response.status == 1) {\n        localStorage.setItem(\n          \"email\",\n          JSON.stringify(this.forgotPswForm.value.email)\n        );\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"success\";\n        this.httpReqService.hideMassege();\n        setTimeout(() => {\n          this.router.navigate([\"auth/verify-otp\"]);\n        }, 1000);\n      } else {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"error\";\n        window.scroll(0, 0);\n      }\n      // if (response) {\n      // localStorage.setItem('accessToken', response.items.token);\n      // const decoded: any = jwt_decode(response.items.token);\n      // const obj = {\n      //   name: decoded.user.name\n      // };\n      // this.authService.currentUserSubjet(response.items.token);\n      // }\n    }\n  }\n}\n","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form [formGroup]=\\\"forgotPswForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n              <h1>Forgot your password?</h1>\\n              <p class=\\\"text-muted\\\">Enter your email below to receive a one-time 5 digit passcode. This will be needed to recover your password</p>\\n              <div class=\\\"input-group mb-3\\\">\\n                <!-- <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\">\\n                        <c-icon name=\\\"cil-user\\\" size=\\\"sm\\\"></c-icon>\\n                      </span>\\n                    </div> -->\\n                <input cInput placeholder=\\\"Email\\\" autocomplete=\\\"Email\\\" required formControlName=\\\"email\\\"\\n                  [ngClass]=\\\"{ 'is-invalid':  (submitted || f.email.touched) && f.email.invalid, 'is-valid': f.email.touched && f.email.valid }\\\" />\\n                <div *ngIf=\\\"submitted && f['email'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f['email'].errors.required\\\">{{formErrors.email.required}}</div>\\n                  <div *ngIf=\\\"f['email'].errors.pattern\\\">{{formErrors.email.email}}</div>\\n                </div>\\n                \\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button cButton color=\\\"primary\\\" class=\\\"px-4\\\" type=\\\"submit\\\" [disabled]=\\\"false\\\">Send</button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button cButton color=\\\"link\\\" class=\\\"px-0\\\" routerLink=\\\"/auth/login\\\">Return to Login</button>\\n                </c-col>\\n              </c-row>\\n            </form>\\n            <div\\n              [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n              {{gs.resMassage.massage || ''}}\\n            </div>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\";","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RouterModule } from \"@angular/router\";\nimport { NgOtpInputModule } from \"ng-otp-input\";\n\n// CoreUI\nimport {\n  ButtonModule,\n  CardModule,\n  FormModule,\n  GridModule,\n  SpinkitModule,\n} from \"@coreui/angular\";\nimport { IconModule } from \"@coreui/icons-angular\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ForgotPasswordComponent } from \"./forgot-password/forgot-password.component\";\nimport { VerifyOtpComponent } from \"./verify-otp/verify-otp.component\";\nimport { RestPasswordComponent } from \"./rest-password/rest-password.component\";\n\nconst routes = [\n  {\n    path: \"\",\n    data: {\n      title: \"Forms\",\n    },\n    children: [\n      {\n        path: \"\",\n        redirectTo: \"login\",\n      },\n      {\n        path: \"login\",\n        component: LoginComponent,\n      },\n      {\n        path: \"forgot-password\",\n        component: ForgotPasswordComponent,\n      },\n      {\n        path: \"verify-otp\",\n        component: VerifyOtpComponent,\n      },\n      {\n        path: \"verify-otp/:id\",\n        component: VerifyOtpComponent,\n      },\n      {\n        path: \"reset-password\",\n        component: RestPasswordComponent,\n      },\n    ],\n  },\n];\n@NgModule({\n  declarations: [\n    LoginComponent,\n    ForgotPasswordComponent,\n    VerifyOtpComponent,\n    RestPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ButtonModule,\n    CardModule,\n    GridModule,\n    IconModule,\n    SpinkitModule,\n    // ToastrModule.forRoot(),\n    // ToastContainerModule,\n    FormModule,\n    ReactiveFormsModule,\n    NgOtpInputModule,\n  ],\n})\nexport class AuthModule {}\n","export default \"<c-container>\\n    <c-row class=\\\"justify-content-center\\\">\\n        <c-col md=\\\"6\\\">\\n            <c-card-group>\\n                <c-card class=\\\"p-4\\\">\\n                    <c-card-body>\\n                        <form [formGroup]=\\\"resetPasswordForm\\\" novalidate class=\\\"needs-validation\\\">\\n                            <h1>Create Password</h1>\\n                            <div class=\\\"input-group mb-3\\\">\\n                                <input cInput id=\\\"name\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\"\\n                                    placeholder=\\\"New Password\\\"\\n                                    [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\">\\n\\n                                <div class=\\\"input-group-append\\\">\\n                                    <span class=\\\"input-group-text\\\">\\n                                        <i [class]=\\\"passwordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"togglePassword()\\\"></i>\\n                                    </span>\\n                                </div>\\n                                <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                    <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                                    <div *ngIf=\\\"f['password'].errors.minlength\\\">\\n                                        {{formErrors.password.minLength}}</div>\\n                                    <div *ngIf=\\\"f['password'].errors.pattern\\\">\\n                                        {{formErrors.password.pattern}}</div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"input-group mb-3\\\">\\n                                <input cInput id=\\\"cPassword\\\" formControlName=\\\"confirmPassword\\\" [type]=\\\"cPasswordType\\\"\\n                                    placeholder=\\\"Confirm New Password\\\"\\n                                    [ngClass]=\\\"{ 'is-invalid': submitted && resetPasswordForm.errors, 'is-valid': f.confirmPassword.touched && !resetPasswordForm.errors }\\\">\\n\\n                                <div class=\\\"input-group-append\\\">\\n                                    <span class=\\\"input-group-text\\\">\\n                                        <i [class]=\\\"cPasswordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"cTogglePassword()\\\"></i>\\n                                    </span>\\n                                </div>\\n                                <div *ngIf=\\\"submitted && resetPasswordForm.errors\\\" class=\\\"invalid-feedback d-block\\\">\\n                                    <div *ngIf=\\\"resetPasswordForm.errors['passwordMismatch']\\\">\\n                                        {{formErrors.confirmPassword.passwordMismatch}}</div>\\n                                </div>\\n                            </div>\\n                            <c-row>\\n                                <c-col col=\\\"6\\\">\\n                                    <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\"\\n                                        (click)=\\\"onSubmit()\\\">\\n                                        <span> Reset Password</span>\\n                                    </button>\\n                                </c-col>\\n                            </c-row>\\n                            <div\\n                                [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n                                {{gs.resMassage.massage || ''}}\\n                            </div>\\n                        </form>\\n                    </c-card-body>\\n                </c-card>\\n            </c-card-group>\\n        </c-col>\\n    </c-row>\\n</c-container>\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { Router } from \"@angular/router\";\nimport {\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from \"@angular/forms\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get(\"password\");\n  const confirm = control.get(\"confirmPassword\");\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: \"app-rest-password\",\n  templateUrl: \"./rest-password.component.html\",\n  styleUrls: [\"./rest-password.component.scss\"],\n})\nexport class RestPasswordComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  resetPasswordForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  passwordType = \"password\";\n  passwordIcon = \"fa fa-eye-slash\";\n  cPasswordType = \"password\";\n  cPasswordIcon = \"fa fa-eye-slash\";\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private httpReqService: HttpReqService,\n    private router: Router,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {}\n\n  createForm() {\n    this.resetPasswordForm = this.fb.group(\n      {\n        password: [\n          \"\",\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: [\"\", [Validators.required]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n    // stop here if form is invalid\n    return this.resetPasswordForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      const authData = {\n        password: this.resetPasswordForm.value.password,\n        confirmPassword: this.resetPasswordForm.value.confirmPassword,\n        email: JSON.parse(localStorage.getItem(\"email\")),\n      };\n      this.resetPasswordForm.value.email = JSON.parse(\n        localStorage.getItem(\"email\")\n      );\n      const response: any = await this.httpReqService.post(\n        \"users/resetPassword\",\n        this.resetPasswordForm.value,\n        true\n      );\n      if (response && response.status == 1) {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"success\";\n        this.httpReqService.hideMassege();\n        this.resetPasswordForm.reset();\n        this.submitted = false;\n        localStorage.removeItem(\"email\");\n        setTimeout(() => {\n          this.router.navigate([\"auth/login\"]);\n        }, 1000);\n      } else {\n        this.gs.resMassage.message = response.message;\n        this.gs.resMassage.message = \"error\";\n        window.scroll(0, 0);\n      }\n      // this.resetPasswordForm.value.email = localStorage.getItem('email');\n      // const response: any = await this.httpReqService.post('users/changePassword', this.resetPasswordForm.value, true);\n      // if (response) {\n      //   this.resetPasswordForm.reset();\n      //   this.submitted = false;\n      // }\n    }\n  }\n\n  togglePassword() {\n    this.passwordType = this.passwordType === \"password\" ? \"text\" : \"password\";\n    this.passwordIcon =\n      this.passwordIcon === \"fa fa-eye-slash\" ? \"fa fa-eye\" : \"fa fa-eye-slash\";\n  }\n\n  cTogglePassword() {\n    this.cPasswordType =\n      this.cPasswordType === \"password\" ? \"text\" : \"password\";\n    this.cPasswordIcon =\n      this.cPasswordIcon === \"fa fa-eye-slash\"\n        ? \"fa fa-eye\"\n        : \"fa fa-eye-slash\";\n  }\n\n  // submit() {\n  //   this.submitted = true;\n  //   if (this.onValidate()) {\n  //     const authData = {\n  //       password: this.resetPasswordForm.value.password,\n  //       confirm_password: this.resetPasswordForm.value.confirmPassword,\n  //       email: localStorage.getItem('email'),\n  //     };\n  //     const response: any = this.httpReqService.post('users/resetPassword', authData, true);\n  //     if (response) {\n  //       this.router.navigate(['auth/login']);\n  //     }\n  //   }\n  // }\n}\n","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form\\n              [formGroup]=\\\"verifyOtpForm\\\"\\n              novalidate\\n              (ngSubmit)=\\\"onSubmit()\\\"\\n              class=\\\"needs-validation\\\"\\n            >\\n              <h3>Please enter 5 digit passcode that was sent to your mail</h3>\\n              <div class=\\\"input-group mb-3\\\">\\n                <ng-otp-input\\n                  class=\\\"text-center\\\"\\n                  (onInputChange)=\\\"onOtpChange($event)\\\"\\n                  [config]=\\\"{ length: 5 }\\\"\\n                >\\n                </ng-otp-input>\\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"primary\\\"\\n                    class=\\\"px-4\\\"\\n                    type=\\\"submit\\\"\\n                    [disabled]=\\\"false\\\"\\n                  >\\n                    Verify\\n                  </button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"link\\\"\\n                    class=\\\"px-0\\\"\\n                    (click)=\\\"resendOtp()\\\"\\n                  >\\n                    Resend Passcode\\n                  </button>\\n                </c-col>\\n              </c-row>\\n              <div\\n                [ngClass]=\\\"{\\n                  errorRes: gs.resMassage.status == 'error',\\n                  succassRes: gs.resMassage.status == 'success'\\n                }\\\"\\n              >\\n                {{ gs.resMassage.massage || \\\"\\\" }}\\n              </div>\\n            </form>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\";","export default \"<c-container>\\n  <c-row class=\\\"justify-content-center\\\">\\n    <c-col md=\\\"6\\\">\\n      <c-card-group>\\n        <c-card class=\\\"p-4\\\">\\n          <c-card-body>\\n            <form\\n              [formGroup]=\\\"loginForm\\\"\\n              novalidate\\n              (ngSubmit)=\\\"onSubmit()\\\"\\n              class=\\\"needs-validation\\\"\\n            >\\n              <h1>Welcome to tracdisc!</h1>\\n              <p class=\\\"text-muted\\\">Please login to your account</p>\\n              <div class=\\\"input-group mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <c-icon name=\\\"cil-envelope-closed\\\" size=\\\"sm\\\"></c-icon>\\n                  </span>\\n                </div>\\n                <input\\n                  cInput\\n                  placeholder=\\\"Email\\\"\\n                  autocomplete=\\\"Email\\\"\\n                  required\\n                  formControlName=\\\"email\\\"\\n                  [ngClass]=\\\"{\\n                    'is-invalid':\\n                      (submitted || f.email.touched) && f.email.invalid,\\n                    'is-valid': f.email.touched && f.email.valid\\n                  }\\\"\\n                />\\n                <div\\n                  *ngIf=\\\"submitted && f['email'].invalid\\\"\\n                  class=\\\"invalid-feedback\\\"\\n                >\\n                  <div *ngIf=\\\"f['email'].errors.required\\\">\\n                    {{ formErrors.email.required }}\\n                  </div>\\n                  <div *ngIf=\\\"f['email'].errors.pattern\\\">\\n                    {{ formErrors.email.email }}\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\\\"input-group mb-4\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <c-icon name=\\\"cil-lock-locked\\\"></c-icon>\\n                  </span>\\n                </div>\\n                <input\\n                  cInput\\n                  type=\\\"password\\\"\\n                  [type]=\\\"passwordType\\\"\\n                  placeholder=\\\"Password\\\"\\n                  autocomplete=\\\"current-password\\\"\\n                  required\\n                  formControlName=\\\"password\\\"\\n                  [ngClass]=\\\"{\\n                    'is-invalid':\\n                      ((submitted || f.password.touched) && f.password.invalid) || (response && gs.resMassage.massage && gs.resMassage.status == 'error')\\n                  }\\\"\\n                />\\n                <div class=\\\"input-group-append\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <i\\n                      [class]=\\\"passwordIcon\\\"\\n                      aria-hidden=\\\"true\\\"\\n                      (click)=\\\"togglePassword()\\\"\\n                    ></i>\\n                  </span>\\n                </div>\\n                <div\\n                  *ngIf=\\\"submitted && f['password'].invalid\\\"\\n                  class=\\\"invalid-feedback\\\"\\n                >\\n                  <div *ngIf=\\\"f['password'].errors.required\\\">\\n                    Password is required\\n                  </div>\\n                  <div *ngIf=\\\"f['password'].errors.minlength\\\">\\n                    {{ formErrors.password.minLength }}\\n                  </div>\\n                  <div *ngIf=\\\"f['password'].errors.pattern\\\">\\n                    {{ formErrors.password.pattern }}\\n                  </div>\\n                </div>\\n              </div>\\n              <c-row>\\n                <c-col col=\\\"6\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"primary\\\"\\n                    class=\\\"px-4\\\"\\n                    type=\\\"submit\\\"\\n                    [disabled]=\\\"false\\\"\\n                  >\\n                    Login\\n                  </button>\\n                </c-col>\\n                <c-col col=\\\"6\\\" class=\\\"text-right\\\">\\n                  <button\\n                    cButton\\n                    color=\\\"link\\\"\\n                    class=\\\"px-0\\\"\\n                    routerLink=\\\"/auth/forgot-password\\\"\\n                  >\\n                    Forgot password?\\n                  </button>\\n                </c-col>\\n              </c-row>\\n            </form>\\n            <div\\n              [ngClass]=\\\"{\\n                errorRes: gs.resMassage.status == 'error',\\n                succassRes: gs.resMassage.status == 'success'\\n              }\\\"\\n            >\\n              {{ response ? gs.resMassage.massage : \\\"\\\" }}\\n            </div>\\n          </c-card-body>\\n        </c-card>\\n      </c-card-group>\\n    </c-col>\\n  </c-row>\\n</c-container>\\n\\n<div class=\\\"loading-indicator\\\" *ngIf=\\\"loading\\\">\\n  <c-spinkit [name]=\\\"'bounce'\\\"></c-spinkit>\\n</div>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, HostBinding, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { GlobalService } from \"../../../services/global.service\";\n\n@Component({\n  selector: \"app-verify-otp\",\n  templateUrl: \"./verify-otp.component.html\",\n  styleUrls: [\"./verify-otp.component.scss\"],\n})\nexport class VerifyOtpComponent implements OnInit {\n  @HostBinding(\"class\") cAppClass = \"c-app flex-row align-items-center\";\n  otp: any;\n  verifyOtpForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private httpReqService: HttpReqService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n    if (this.route.snapshot.params.id) {\n      console.log(this.route.snapshot.params.id);\n      var current_date = new Date(Date.now());\n      var email_token = this.route.snapshot.params.id;\n      var json = this.getIDFromEmailToken(email_token);\n\n      var difference = current_date.getTime() - json.milli_seconds;\n      difference = difference / (3600 * 60 * 24);\n      if (difference > 5) {\n        this.router.navigate([\"auth/login\"]);\n      } else {\n        this.check_valid_link(json);\n      }\n    }\n  }\n\n  getIDFromEmailToken(email_token) {\n    var server_token = \"\",\n      id = \"\",\n      milli = \"\";\n    var milli_seconds = 0;\n    var length = 30; // 13 milli seconds so * 2 => 26\n\n    var milli_token = email_token.substr(0, length);\n    var id_token = email_token.substr(length);\n\n    for (var i = 0; i < length; i++) {\n      if (i % 2 == 0) {\n        milli = milli + milli_token.charAt(i);\n      } else {\n        server_token = server_token + milli_token.charAt(i);\n      }\n    }\n\n    milli = milli.split(\"\").reverse().join(\"\");\n    milli_seconds = parseInt(milli);\n\n    length = id_token.length;\n    for (var i = 0; i < length; i++) {\n      if (i % 2 == 0) {\n        id = id + id_token.charAt(i);\n      } else {\n        server_token = server_token + id_token.charAt(i);\n      }\n    }\n    return { id: id, server_token: server_token, milli_seconds: milli_seconds };\n  }\n\n  async check_valid_link(json) {\n    const response: any = await this.httpReqService.post(\n      \"users/check_valid_detail\",\n      json,\n      true\n    );\n    if (response.items && response.items.email) {\n      this.gs.resMassage.massage = '';\n      localStorage.setItem(\"email\", JSON.stringify(response.items.email));\n\n    } else {\n      this.router.navigate([\"auth/login\"]);\n    }\n  }\n\n  onOtpChange(otp) {\n    this.otp = otp;\n  }\n\n  /**\n   * Create Login Form\n   */\n  createForm() {\n    this.verifyOtpForm = this.fb.group({\n      otp: [\"\", [Validators.required]],\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.verifyOtpForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.verifyOtpForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (!this.otp) {\n      return;\n    }\n    const obj = {\n      otp: this.otp,\n      email: JSON.parse(localStorage.getItem(\"email\")),\n    };\n    // if (this.onValidate()) {\n    const response: any = await this.httpReqService.post(\n      \"users/verifyOtp\",\n      obj,\n      true\n    );\n    if (response && response.status == 1) {\n      this.gs.resMassage.message = response.message;\n      this.gs.resMassage.message = \"success\";\n      this.httpReqService.hideMassege();\n      setTimeout(() => {\n        this.router.navigate([\"auth/reset-password\"]);\n      }, 1000);\n      // localStorage.setItem('accessToken', response.items.token);\n      // const decoded: any = jwt_decode(response.items.token);\n      // const obj = {\n      //   name: decoded.user.name\n      // };\n      // localStorage.setItem('currentUser', JSON.stringify(obj));\n      // this.authService.currentUserSubjet(response.items.token);\n    } else {\n      this.gs.resMassage.message = response.message;\n      this.gs.resMassage.message = \"error\";\n      window.scroll(0, 0);\n    }\n    // }\n  }\n\n  resendOtp() {\n    const obj = { email: JSON.parse(localStorage.getItem(\"email\")) };\n    const response: any = this.httpReqService.post(\n      \"users/forgotPassword\",\n      obj,\n      true\n    );\n    if (response) {\n      // this.router.navigate(['auth/reset-password']);\n    }\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2ZXJpZnktb3RwLmNvbXBvbmVudC5zY3NzIn0= */\";"]}