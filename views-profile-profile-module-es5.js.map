{"version":3,"sources":["webpack:///src/app/views/profile/profile/profile.component.ts","webpack:///src/app/views/profile/payment-details/payment-details.component.html","webpack:///src/app/views/profile/profile.module.ts","webpack:///src/app/views/profile/profile-otp/profile-otp.component.ts","webpack:///src/app/views/profile/profile/profile.component.scss","webpack:///src/app/views/profile/change-password/change-password.component.ts","webpack:///src/app/views/profile/payment-details/payment-details.component.scss","webpack:///src/app/views/profile/profile-otp/profile-otp.component.html","webpack:///src/app/views/profile/change-password/change-password.component.scss","webpack:///src/app/views/profile/change-password/change-password.component.html","webpack:///src/app/views/profile/payment-details/payment-details.component.ts","webpack:///src/app/views/profile/profile-otp/profile-otp.component.scss","webpack:///src/app/views/profile/profile/profile.component.html","webpack:///node_modules/@stripe/stripe-js/dist/stripe.esm.js"],"names":["ProfileComponent","httpReqService","authService","fb","vf","gs","modalService","tabs","header","icon","userData","submitted","mediaUrl","clearMassage","tokenData","decodeToken","formErrors","errorMessages","createForm","getUserDetail","profileForm","controls","group","email","required","name","pattern","formRules","e","file","target","files","reader","FileReader","readAsDataURL","onload","_event","imgUrl","result","get","user","_id","response","items","patchValue","status","onValidate","value","formData","FormData","append","JSON","stringify","post","initialState","title","modalRef","show","backdrop","keyboard","content","cancleButtonText","submitButtonText","subscribe","obj","image","localStorage","setItem","profileSubject","resMassage","massage","hideMassege","selector","template","routes","path","children","redirectTo","data","component","ProfileModule","declarations","imports","forChild","ProfileOtpComponent","verifyOtpForm","otp","next","hide","console","log","encapsulation","None","confirmPasswordValidator","control","password","confirm","passwordMismatch","ChangePasswordComponent","router","passwordType","passwordIcon","oldPasswordType","oldPasswordIcon","cPasswordType","cPasswordIcon","changePasswordForm","oldPassword","minLength","passwordMin","passwordPattern","confirmPassword","validators","reset","logOut","removeItem","currentUserSubjet","navigate","PaymentDetailsComponent","httpClient","styleCard","initStripe","stripe","createElements","elements","cardElement","create","getElement","mount","on","event","complete","error","_this","resultContainer","document","getElementById","createPaymentMethod","type","card","billing_details","then","textContent","message","attachPaymentMethod","paymentMethod","id","paymentMethodId","orgId","organizationId","V3_URL","V3_URL_REGEX","EXISTING_SCRIPT_MESSAGE","findScript","scripts","querySelectorAll","concat","i","length","script","test","src","injectScript","params","queryString","advancedFraudSignals","createElement","headOrBody","head","body","Error","appendChild","registerWrapper","startTime","_registerWrapper","version","stripePromise","loadScript","Promise","resolve","reject","window","Stripe","warn","addEventListener","maybeStripe","args","apply","undefined","stripePromise$1","loadCalled","err","loadStripe","_len","arguments","Array","_key","Date","now"],"mappings":"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","file":"views-profile-profile-module-es5.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { AuthService } from \"../../../services/auth.service\";\nimport { HttpReqService } from \"../../../services/http-req.service\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ValidationFormsService } from \"../../../services/validation-forms.service\";\nimport { environment } from \"../../../../environments/environment\";\nimport { GlobalService } from \"../../../services/global.service\";\nimport { ProfileOtpComponent } from \"../profile-otp/profile-otp.component\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.component.html\",\n  styleUrls: [\"./profile.component.scss\"],\n})\nexport class ProfileComponent implements OnInit {\n  tabs: any[] = [\n    { header: \"Update Account\", icon: \"cil-user\" },\n    { header: \"Change Password\", icon: \"cil-lock-locked\" },\n    { header: \"Payment Details\", icon: \"cil-lock-locked\" },\n  ];\n  file: any;\n  imgUrl: any;\n  tokenData: any;\n  userData: any = {};\n  profileForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  modalRef: BsModalRef;\n  mediaUrl = environment.mediaUrl;\n  constructor(\n    private httpReqService: HttpReqService,\n    private authService: AuthService,\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    public gs: GlobalService,\n    private modalService: BsModalService\n  ) {\n    this.httpReqService.clearMassage();\n    this.tokenData = this.authService.decodeToken();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.getUserDetail();\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.profileForm.controls;\n  }\n\n  /**\n   * Create profile form\n   */\n  createForm() {\n    this.profileForm = this.fb.group({\n      email: [\"\", [Validators.required]],\n      name: [\n        \"\",\n        [Validators.required, Validators.pattern(this.vf.formRules.name)],\n      ],\n    });\n  }\n\n  selectProfile(e) {\n    this.file = e.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(this.file);\n    reader.onload = (_event) => {\n      this.imgUrl = reader.result;\n    };\n  }\n\n  async getUserDetail() {\n    const response: any = await this.httpReqService.get(\n      \"users\",\n      this.tokenData.user._id\n    );\n    this.userData = response.items[0];\n    this.profileForm.patchValue(this.userData);\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.profileForm.status === \"VALID\";\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      if (\n        this.profileForm.value.email != this.userData.email ||\n        this.profileForm.value.name != this.userData.name ||\n        this.imgUrl\n      ) {\n        this.profileForm.value._id = this.userData._id;\n        if (this.profileForm.value.email == this.userData.email) {\n          delete this.profileForm.value.email;\n        }\n        if (this.profileForm.value.name == this.userData.name) {\n          delete this.profileForm.value.name;\n        }\n        const formData = new FormData();\n        formData.append(\"data\", JSON.stringify(this.profileForm.value));\n        if (this.file) {\n          formData.append(\"image\", this.file);\n        }\n        const response: any = await this.httpReqService.post(\n          \"users/editProfile\",\n          formData,\n          true\n        );\n        if (response) {\n          if (this.profileForm.value && this.userData.email !== this.profileForm.value.email) {\n            const initialState = {\n              title: \"Profile OTP\",\n            };\n            this.modalRef = this.modalService.show(ProfileOtpComponent, {\n              class: \"modal-xl modal-dialog-centered \",\n              initialState,\n              backdrop: \"static\",\n              keyboard: false,\n            });\n            this.modalRef.content.cancleButtonText = \"Cancel\";\n            this.modalRef.content.submitButtonText = \"Submit\";\n            this.modalRef.content.response.subscribe((result) => {\n              if (result) {\n              }\n            });\n          }\n          this.userData = response.items;\n          const obj = {\n            name: response.items.name,\n            email: response.items.email,\n            image: response.items.image,\n          };\n          localStorage.setItem(\"currentUser\", JSON.stringify(obj));\n          this.authService.profileSubject(obj);\n        }\n      } else {\n        this.gs.resMassage.massage = \"Already up to date !!\";\n        this.gs.resMassage.status = \"success\";\n        this.httpReqService.hideMassege();\n      }\n    }\n  }\n}\n","export default \"<c-card>\\n    <c-card-body>\\n        <c-row>\\n            <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                <label for=\\\"card-element\\\">Card</label>\\n                <div id=\\\"card-element\\\"></div>\\n            </c-col>\\n        </c-row>\\n    </c-card-body>\\n    <c-card-footer>\\n        <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\" (click)=\\\"onClick()\\\">\\n            <span> Save Card</span>\\n        </button>\\n        <button cButton type=\\\"reset\\\" color=\\\"secondary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\" routerLink=\\\"/dashboard\\\">\\n            <c-icon name=\\\"cil-x-circle\\\" size=\\\"sm\\\"></c-icon>\\n            <span> Cancel</span>\\n        </button>\\n    </c-card-footer>\\n</c-card>\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProfileComponent } from './profile/profile.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { RouterModule } from '@angular/router';\n\n// CoreUI Modules\nimport {\n  ButtonModule,\n  CardModule,\n  FormModule,\n  GridModule,\n  ImgModule,\n  TabsetModule,\n} from '@coreui/angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgOtpInputModule } from 'ng-otp-input';\nimport { IconModule } from '@coreui/icons-angular';\n// import { ReactiveFormsModule } from '@angular/forms';\nimport { ProfileOtpComponent } from './profile-otp/profile-otp.component';\nimport { PaymentDetailsComponent } from './payment-details/payment-details.component';\n\nconst routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: '',\n        redirectTo: 'update',\n      },\n      {\n        path: 'update',\n        data: {\n          title: 'Profile',\n        },\n        component: ProfileComponent\n      },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    ProfileComponent,\n    ChangePasswordComponent,\n    ProfileOtpComponent,\n    PaymentDetailsComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    TabsetModule,\n    CardModule,\n    IconModule,\n    GridModule,\n    FormModule,\n    ButtonModule,\n    ImgModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgOtpInputModule\n  ]\n})\nexport class ProfileModule { }\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { AuthService } from '../../../services/auth.service';\nimport { GlobalService } from '../../../services/global.service';\nimport { HttpReqService } from '../../../services/http-req.service';\nimport { ValidationFormsService } from '../../../services/validation-forms.service';\n\n@Component({\n  selector: 'app-profile-otp',\n  templateUrl: './profile-otp.component.html',\n  styleUrls: ['./profile-otp.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ProfileOtpComponent implements OnInit {\n\n  title: any;\n  cancleButtonText: string;\n  submitButtonText: string;\n  public response: Subject<boolean>;\n  verifyOtpForm: FormGroup;\n  otp: any;\n  formErrors: any;\n  userData: any = {};\n  submitted = false;\n  tokenData: any;\n\n  constructor(\n    public modalRef: BsModalRef,\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    public authService: AuthService,\n    public gs: GlobalService,\n    private httpReqService: HttpReqService,\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.tokenData = this.authService.decodeToken();\n  }\n\n  ngOnInit(): void {\n    this.getUserDetail();\n    this.response = new Subject();\n    this.verifyOtpForm = this.fb.group({\n      otp: [\"\", [Validators.required]],\n    });\n  }\n\n  async getUserDetail() {\n    const response: any = await this.httpReqService.get('users', this.tokenData.user._id);\n    this.userData = response.items[0];\n  }\n\n  onOtpChange(otp) {\n    this.otp = otp;\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.verifyOtpForm.controls;\n  }\n\n  cancle(): void {\n    this.response.next();\n    this.modalRef.hide();\n  }\n\n  onValidate() {\n    this.submitted = true;\n    // stop here if form is invalid\n    return this.verifyOtpForm.status === \"VALID\";\n  }\n\n  async updateProfile() {\n    if (this.onValidate()) {\n\n      const obj = {\n        otp: this.verifyOtpForm.value.otp,\n        email: this.userData.email\n      };\n\n      const response: any = await this.httpReqService.post(\n        \"users/verifyChangeReqOtp\",\n        obj,\n        true\n      );\n      console.log(response)\n    }\n  }\n\n\n}","export default \".image-section {\\n  display: inline-grid !important;\\n}\\n.image-section img {\\n  height: 256px;\\n  width: 256px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2ZpbGUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSwrQkFBQTtBQUNKO0FBQUk7RUFDSSxhQUFBO0VBQ0EsWUFBQTtBQUVSIiwiZmlsZSI6InByb2ZpbGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW1hZ2Utc2VjdGlvbntcbiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZCAhaW1wb3J0YW50O1xuICAgIGltZ3tcbiAgICAgICAgaGVpZ2h0OiAyNTZweDtcbiAgICAgICAgd2lkdGg6IDI1NnB4O1xuICAgIH1cbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { HttpReqService } from '../../../services/http-req.service';\nimport { FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { ValidationFormsService } from '../../../services/validation-forms.service';\nimport { GlobalService } from '../../../services/global.service';\nimport { AuthService } from '../../../services/auth.service';\nimport { Router } from '@angular/router';\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (\n  control: FormGroup\n): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value\n    ? null\n    : { passwordMismatch: true };\n};\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n  changePasswordForm: FormGroup;\n  formErrors: any;\n  submitted = false;\n  passwordType = 'password';\n  passwordIcon = 'fa fa-eye-slash';\n  oldPasswordType = 'password';\n  oldPasswordIcon = 'fa fa-eye-slash';\n  cPasswordType = 'password';\n  cPasswordIcon = 'fa fa-eye-slash';\n  constructor(\n    private httpReqService: HttpReqService,\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    public gs: GlobalService,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.httpReqService.clearMassage();\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.changePasswordForm.controls;\n  }\n\n  /**\n  * Create  form\n  */\n  createForm() {\n    this.changePasswordForm = this.fb.group(\n      {\n\n        oldPassword: ['', [\n          Validators.required,\n          //Validators.minLength(this.vf.formRules.passwordMin),\n          //Validators.pattern(this.vf.formRules.passwordPattern),\n        ]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(this.vf.formRules.passwordMin),\n            Validators.pattern(this.vf.formRules.passwordPattern),\n          ],\n        ],\n        confirmPassword: ['', [Validators.required]],\n      },\n      { validators: confirmPasswordValidator }\n    );\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.changePasswordForm.status === 'VALID';\n  }\n\n  async onSubmit() {\n    if (this.onValidate()) {\n      const response: any = await this.httpReqService.post('users/changePassword', this.changePasswordForm.value, true);\n      if (response) {\n        this.changePasswordForm.reset();\n        this.submitted = false;\n        this.logOut();\n      }\n    }\n  }\n\n  async logOut() {\n    const response = await this.httpReqService.post('users/logOut', {}, false);\n    if (response) {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('currentUser');\n      this.authService.currentUserSubjet(null);\n      this.router.navigate(['auth/login']);\n    }\n  }\n\n  togglePassword() {\n    this.passwordType = this.passwordType === 'password' ? 'text' : 'password';\n    this.passwordIcon = this.passwordIcon === 'fa fa-eye-slash' ? 'fa fa-eye' : 'fa fa-eye-slash';\n  }\n  oldTogglePassword() {\n    this.oldPasswordType = this.oldPasswordType === 'password' ? 'text' : 'password';\n    this.oldPasswordIcon = this.oldPasswordIcon === 'fa fa-eye-slash' ? 'fa fa-eye' : 'fa fa-eye-slash';\n  }\n  cTogglePassword() {\n    this.cPasswordType = this.cPasswordType === 'password' ? 'text' : 'password';\n    this.cPasswordIcon = this.cPasswordIcon === 'fa fa-eye-slash' ? 'fa fa-eye' : 'fa fa-eye-slash';\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXltZW50LWRldGFpbHMuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"<div class=\\\"modal-content\\\">\\n    <div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title custom-title\\\" id=\\\"exampleModalLabel\\\">{{title}}</h5>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <form [formGroup]=\\\"verifyOtpForm\\\" novalidate (ngSubmit)=\\\"updateProfile()\\\" class=\\\"needs-validation\\\">\\n            <h3>Please enter 5 digit passcode that was sent to your mail</h3>\\n            <div class=\\\"input-group mb-3\\\">\\n                <c-form-group cRow>\\n                    <label cLabel=\\\"col\\\" cCol md=\\\"4\\\">OTP</label>\\n                    <c-col md=\\\"8\\\">\\n                        <input cInput type=\\\"text\\\" maxlength=\\\"5\\\" formControlName=\\\"otp\\\" placeholder=\\\"Enter otp\\\">\\n                        <div *ngIf=\\\"submitted && f['otp'].invalid\\\" class=\\\"invalid-feedback d-block\\\">\\n                            <div *ngIf=\\\"f['otp'].errors.required\\\">\\n                                Please enter OTP.\\n                            </div>\\n                        </div>\\n                    </c-col>\\n                </c-form-group>\\n            </div>\\n            <div class=\\\"massegeCls\\\" [ngClass]=\\\"{\\n                errorRes: gs.resMassage.status == 'error',\\n                succassRes: gs.resMassage.status == 'success'\\n              }\\\">\\n                {{ gs.resMassage.massage || \\\"\\\" }}\\n            </div>\\n        </form>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button cButton color=\\\"primary\\\" (click)=\\\"updateProfile()\\\">{{submitButtonText}}</button>\\n        <button cButton color=\\\"secondary\\\" (click)=\\\"cancle()\\\">{{cancleButtonText}}</button>\\n    </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjaGFuZ2UtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"<c-card>\\n    <c-card-body>\\n        <form [formGroup]=\\\"changePasswordForm\\\" novalidate class=\\\"needs-validation\\\">\\n            <c-row>\\n                <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                    <c-form-group>\\n                        <label for=\\\"ccnumber\\\">Current Password</label>\\n                        <c-input-group>\\n                            <input cInput id=\\\"ccnumber\\\" [type]=\\\"oldPasswordType\\\" formControlName=\\\"oldPassword\\\"\\n                                [ngClass]=\\\"{ 'is-invalid':  (submitted || f.oldPassword.touched) && f.oldPassword.invalid, 'is-valid': f.oldPassword.touched && f.oldPassword.valid }\\\">\\n                            <c-input-group-append>\\n                                <c-input-group-text>\\n                                    <i [class]=\\\"oldPasswordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"oldTogglePassword()\\\"></i>\\n                                </c-input-group-text>\\n                            </c-input-group-append>\\n                            <div *ngIf=\\\"submitted && f['oldPassword'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"f['oldPassword'].errors.required\\\">Current Password is required</div>\\n                                <!--<div *ngIf=\\\"f['oldPassword'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\n                                <div *ngIf=\\\"f['oldPassword'].errors.pattern\\\">{{formErrors.password.pattern}}</div>-->\\n                            </div>\\n                        </c-input-group>\\n                    </c-form-group>\\n                </c-col>\\n            </c-row>\\n            <c-row>\\n                <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                    <c-form-group>\\n                        <label cLabel for=\\\"name\\\">New Password</label>\\n                        <c-input-group>\\n                            <input cInput id=\\\"name\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\"\\n                                [ngClass]=\\\"{ 'is-invalid':  (submitted || f.password.touched) && f.password.invalid, 'is-valid': f.password.touched && f.password.valid }\\\">\\n                            <c-input-group-append>\\n                                <c-input-group-text>\\n                                    <i [class]=\\\"passwordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"togglePassword()\\\"></i>\\n                                </c-input-group-text>\\n                            </c-input-group-append>\\n                            <div *ngIf=\\\"submitted && f['password'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                                <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\n                                <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\n                            </div>\\n                        </c-input-group>\\n                    </c-form-group>\\n                </c-col>\\n            </c-row>\\n            <c-row>\\n                <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                    <c-form-group class=\\\"image-section\\\">\\n                        <label cLabel for=\\\"name\\\">Confirm New Password</label>\\n                        <c-input-group>\\n                            <input cInput [type]=\\\"cPasswordType\\\" formControlName=\\\"confirmPassword\\\" required\\n                                [ngClass]=\\\"{ 'is-invalid': submitted && changePasswordForm.errors, 'is-valid': f.confirmPassword.touched && !changePasswordForm.errors }\\\">\\n                            <c-input-group-append>\\n                                <c-input-group-text>\\n                                    <i [class]=\\\"cPasswordIcon\\\" aria-hidden=\\\"true\\\" (click)=\\\"cTogglePassword()\\\"></i>\\n                                </c-input-group-text>\\n                            </c-input-group-append>\\n                            <div *ngIf=\\\"submitted && changePasswordForm.errors\\\" class=\\\"invalid-feedback\\\">\\n                                <div *ngIf=\\\"changePasswordForm.errors['passwordMismatch']\\\">\\n                                    {{formErrors.confirmPassword.passwordMismatch}}</div>\\n                            </div>\\n                        </c-input-group>\\n                    </c-form-group>\\n                </c-col>\\n            </c-row>\\n        </form>\\n    </c-card-body>\\n    <c-card-footer>\\n        <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\" (click)=\\\"onSubmit()\\\">\\n            <span> Change Password</span>\\n        </button>\\n        <button cButton type=\\\"reset\\\" color=\\\"secondary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\" routerLink=\\\"/dashboard\\\">\\n            <c-icon name=\\\"cil-x-circle\\\" size=\\\"sm\\\"></c-icon>\\n            <span> Cancel</span>\\n        </button>\\n    </c-card-footer>\\n    <div class=\\\"massegeCls\\\"\\n        [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n        {{gs.resMassage.massage || ''}}\\n    </div>\\n</c-card>\";","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { loadStripe, Stripe, StripeElements } from '@stripe/stripe-js';\nimport { HttpReqService } from '../../../services/http-req.service';\nimport { AuthService } from \"../../../services/auth.service\";\n\n@Component({\n  selector: 'app-payment-details',\n  templateUrl: './payment-details.component.html',\n  styleUrls: ['./payment-details.component.scss']\n})\nexport class PaymentDetailsComponent implements OnInit {\n  tokenData: any;\n  stripe: Stripe;\n  elements: StripeElements;\n  cardElement\n\n  styleCard = {\n    'style': {\n      'base': {\n        'fontFamily': 'Arial, sans-serif',\n        'fontSize': '8px',\n        'color': '#C1C7CD',\n      },\n      'Invalid': { 'color': 'red', },\n    }\n  };\n  constructor(\n    private httpClient: HttpClient,\n    private httpReqService: HttpReqService,\n    public authService: AuthService,\n  ) { }\n\n  ngOnInit(): void {\n    this.tokenData = this.authService.decodeToken();\n    this.initStripe();\n  }\n  async initStripe() {\n    this.stripe = await loadStripe('pk_test_51JCS4KSJu2s95RzqVBt3GG75J1GwBJ1HfwqqrI0ty5F0yxTlIf5V8AAgfbGiM2DGVEi6w7JNM742fat5Lr4i40AM00rhzDcuHt');\n    this.createElements()\n  }\n\n  createElements() {\n    this.elements = this.stripe.elements();\n    this.cardElement = this.elements.create('card');\n    this.cardElement = this.elements.getElement('card');\n    this.cardElement.mount('#card-element');\n    this.cardElement.on('change', function (event) {\n      if (event.complete) {\n        console.log('Complete', event)\n        // enable payment button\n      } else if (event.error) {\n        // show validation to customer\n        console.log('Error', event)\n      }\n    });\n  }\n\n  onClick() {\n    let _this = this;\n    var resultContainer = document.getElementById('card-result');\n    this.stripe.createPaymentMethod({\n      type: 'card',\n      card: this.cardElement,\n      billing_details: {\n        name: \"SomeOne\",\n      },\n    }\n    ).then(function (result) {\n      if (result.error) {\n        // Display error.message in your UI\n        resultContainer.textContent = result.error.message;\n      } else {\n        // You have successfully created a new PaymentMethod\n        // resultContainer.textContent = \"Created payment method: \" + result.paymentMethod.id;\n        _this.attachPaymentMethod(result.paymentMethod.id)\n      }\n    });\n  }\n\n  async attachPaymentMethod(paymentMethodId) {\n    const response = this.httpReqService.post(\"attachpaymentmethod\", {\n      orgId: this.tokenData && this.tokenData.user && this.tokenData.user.organizationId ? this.tokenData.user.organizationId : '',\n      paymentMethodId: paymentMethodId,\n    }, false)\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9maWxlLW90cC5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<div class=\\\"fade-in\\\">\\n    <c-card>\\n        <c-card-header>\\n            Update Profile\\n        </c-card-header>\\n        <c-card-body>\\n            <c-tabset boxed=\\\"true\\\" [activeTab]=\\\"'0'\\\">\\n                <c-tablist>\\n                    <c-tab *ngFor=\\\"let tab of tabs\\\">\\n                        <c-icon [name]=\\\"tab.icon\\\" class=\\\"pb-1\\\"></c-icon>\\n                        {{tab.header}}\\n                    </c-tab>\\n                </c-tablist>\\n                <c-tab-content>\\n                    <c-tab-pane>\\n                        <c-card>\\n                            <c-card-body>\\n                                <form [formGroup]=\\\"profileForm\\\" novalidate class=\\\"needs-validation\\\">\\n                                    <c-row>\\n                                        <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                                            <c-form-group>\\n                                                <label for=\\\"ccnumber\\\">Email</label>\\n                                                <input cInput id=\\\"ccnumber\\\" placeholder=\\\"Email\\\"\\n                                                    formControlName=\\\"email\\\">\\n                                                <p class=\\\"errorRes\\\"\\n                                                    *ngIf=\\\"userData && userData.status == 5 || userData.status == 6\\\">\\n                                                    Your email update request is under review\\n                                                </p>\\n                                            </c-form-group>\\n                                        </c-col>\\n                                        <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                                            <c-form-group>\\n                                                <label cLabel for=\\\"name\\\">Name</label>\\n                                                <input cInput id=\\\"name\\\" placeholder=\\\"Name\\\" formControlName=\\\"name\\\" [readonly]=\\\"userData.status == 4 || userData.status == 6\\\"\\n                                                    [ngClass]=\\\"{ 'is-invalid':  (submitted || f.name.touched) && f.name.invalid, 'is-valid': f.name.touched && f.name.valid }\\\">\\n                                                <div *ngIf=\\\"submitted && f['name'].invalid\\\" class=\\\"invalid-feedback\\\">\\n                                                    <div *ngIf=\\\"f['name'].errors.required\\\">\\n                                                        {{formErrors.name.required}}\\n                                                    </div>\\n                                                    <div *ngIf=\\\"f['name'].errors.pattern\\\">{{formErrors.name.pattern}}\\n                                                    </div>\\n                                                </div>\\n                                                <p class=\\\"errorRes\\\"\\n                                                    *ngIf=\\\"userData && userData.status == 4 || userData.status == 6\\\">\\n                                                    Your name update request is under review\\n                                                </p>\\n                                            </c-form-group>\\n                                        </c-col>\\n                                    </c-row>\\n                                    <c-row>\\n                                        <c-col sm=\\\"12\\\" md=\\\"6\\\">\\n                                            <c-form-group class=\\\"image-section\\\">\\n                                                <label cLabel for=\\\"name\\\">Profile Picture</label>\\n                                                <input cInput type=\\\"file\\\" #file name=\\\"file-input\\\" accept=\\\"image/*\\\"\\n                                                    hidden (change)=\\\"selectProfile($event)\\\">\\n                                                <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\"\\n                                                    (click)=\\\"file.click()\\\">\\n                                                    <span> Choose Profile</span>\\n                                                </button>\\n                                                <img cImg [fluid]=\\\"true\\\" align=\\\"right\\\" shape=\\\"rounded-lg\\\" width=\\\"256\\\"\\n                                                    height=\\\"256\\\" loading=\\\"lazy\\\" [src]=\\\"imgUrl\\\" class=\\\"mb-2\\\"\\n                                                    *ngIf=\\\"imgUrl\\\" class=\\\"mt-2\\\" />\\n                                                <img cImg [fluid]=\\\"true\\\" align=\\\"right\\\" shape=\\\"rounded-lg\\\" width=\\\"256\\\"\\n                                                    height=\\\"256\\\" loading=\\\"lazy\\\" [src]=\\\"mediaUrl + userData.image\\\"\\n                                                    class=\\\"mb-2\\\" *ngIf=\\\"userData && userData.image && !imgUrl\\\"\\n                                                    class=\\\"mt-2\\\" />\\n                                            </c-form-group>\\n                                        </c-col>\\n                                    </c-row>\\n                                </form>\\n                            </c-card-body>\\n                            <c-card-footer>\\n                                <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\"\\n                                    (click)=\\\"onSubmit()\\\">\\n                                    <c-icon name=\\\"cil-check-circle\\\" size=\\\"sm\\\"></c-icon>\\n                                    <span> Save</span>\\n                                </button>\\n                                <button cButton type=\\\"reset\\\" color=\\\"secondary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\"\\n                                    routerLink=\\\"/dashboard\\\">\\n                                    <c-icon name=\\\"cil-x-circle\\\" size=\\\"sm\\\"></c-icon>\\n                                    <span> Cancel</span>\\n                                </button>\\n                            </c-card-footer>\\n                            <div class=\\\"massegeCls\\\"\\n                                [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n                                {{gs.resMassage.massage || ''}}\\n                            </div>\\n                        </c-card>\\n                    </c-tab-pane>\\n                    <c-tab-pane>\\n                        <app-change-password></app-change-password>\\n                    </c-tab-pane>\\n                    <c-tab-pane>\\n                        <app-payment-details></app-payment-details>\\n                    </c-tab-pane>\\n                </c-tab-content>\\n            </c-tabset>\\n        </c-card-body>\\n    </c-card>\\n</div>\";","var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.16.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n};\n\n// own script injection.\n\nvar stripePromise$1 = Promise.resolve().then(function () {\n  return loadScript(null);\n});\nvar loadCalled = false;\nstripePromise$1[\"catch\"](function (err) {\n  if (!loadCalled) {\n    console.warn(err);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now();\n  return stripePromise$1.then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n"]}