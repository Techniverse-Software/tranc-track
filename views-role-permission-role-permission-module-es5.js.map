{"version":3,"sources":["webpack:///src/app/views/role-permission/role-permission.component.ts","webpack:///src/app/views/role-permission/role-permission.module.ts","webpack:///src/app/views/role-permission/role-permission.component.html","webpack:///src/app/views/role-permission/role-permission.component.scss"],"names":["RolePermissionComponent","httpReqService","fb","vf","router","route","gs","submitted","roleArr","permissionArr","name","slug","checked","allPermissionArr","permissions","gridOption","allrecords","sortField","sortOrder","clearMassage","createForm","formErrors","errorMessages","map","a","permissionForm","group","role","required","controls","status","post","value","response","items","permissionList","length","forEach","permission","i","includes","onValidate","push","obj","reset","event","type","val","target","selector","template","path","data","title","children","redirectTo","component","RolePermissionModule","declarations","imports","forChild"],"mappings":"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","file":"views-role-permission-role-permission-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpReqService } from '../../services/http-req.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ValidationFormsService } from '../../services/validation-forms.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GridOption } from '../../partial/model/gridOption';\nimport { GlobalService } from './../../services/global.service';\n\n@Component({\n  selector: 'app-role-permission',\n  templateUrl: './role-permission.component.html',\n  styleUrls: ['./role-permission.component.scss']\n})\nexport class RolePermissionComponent implements OnInit {\n  submitted = false;\n  formErrors: any;\n  roleArr: any = ['Admin',\n    'Super Admin',\n    'Scanner',\n    'Intaller',\n    'ScannerAndInstaller',\n    'Resellers',\n    'Organization Manager'];\n  permissionForm: FormGroup;\n  permissionArr: any = [{\n    name: 'Add Device',\n    slug: 'addDevice',\n    checked: false\n  }, {\n    name: 'Device Allocation',\n    slug: 'deviceAllocation',\n    checked: false\n  }, {\n    name: 'New Organization',\n    slug: 'newOrganization',\n    checked: false\n  }, {\n    name: 'Add Organization Price',\n    slug: 'addOrganizationPrice',\n    checked: false\n  }, {\n    name: 'View Unique Organization Code',\n    slug: 'viewOrgCode',\n    checked: false\n  }, {\n    name: 'Approve Request For Join Organization',\n    slug: 'approveReqForJoinOrg',\n    checked: false\n  }, {\n    name: 'View Organization Scan',\n    slug: 'viewScanOrg',\n    checked: false\n  }, {\n    name: 'View Scan History',\n    slug: 'viewScanHistory',\n    checked: false\n  }];\n  allPermissionArr = [];\n  role: any;\n  permissions: any = [];\n  selectedTemplateIndex: any;\n  gridOption: GridOption = {\n    allrecords: true,\n    sortField: 'role',\n    sortOrder: 'asc',\n  };\n  permissionList: any;\n  constructor(\n    private httpReqService: HttpReqService,\n    private fb: FormBuilder,\n    public vf: ValidationFormsService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public gs: GlobalService\n  ) {\n    this.httpReqService.clearMassage();\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.formErrors = this.vf.errorMessages;\n    this.allPermissionArr = this.permissionArr.map(a => ({ ...a }));\n  }\n\n  /**\n   * Create profile form\n   */\n  createForm() {\n    this.permissionForm = this.fb.group(\n      {\n        role: [\n          '',\n          [\n            Validators.required,\n          ],\n        ],\n        permissions: ['', [\n          // Validators.required,\n        ]],\n      }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.permissionForm.controls;\n  }\n\n  onValidate() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    return this.permissionForm.status === 'VALID';\n  }\n\n  async changeRole() {\n    this.permissionArr = this.allPermissionArr.map(a => ({ ...a }));\n    const response: any = await this.httpReqService.post('rolePermission/roleWiseGetPermission', this.permissionForm.value, false);\n    if (response && response.items) {\n      this.permissionList = response.items.permissions;\n      if (this.permissionList.length) {\n        this.permissionArr.forEach((permission, i) => {\n          if (this.permissionList.includes(permission.slug)) {\n            permission.checked = true;\n          }\n        });\n      }\n    }\n  }\n\n\n  changeCheckbox(permission) {\n    this.permissionArr[permission].checked = !this.permissionArr[permission].checked;\n  }\n\n  async save() {\n    if (this.onValidate()) {\n      this.permissions = [];\n      this.permissionArr.forEach((permission, i) => {\n        if (permission.checked) {\n          this.permissions.push(permission.slug);\n        }\n      });\n      const obj = {\n        permissions: this.permissions,\n        role: this.permissionForm.value.role\n      };\n      const response: any = await this.httpReqService.post('rolePermission/create', obj, true);\n      if (response) {\n        this.submitted = false;\n        this.permissionForm.reset();\n        this.permissionArr = this.allPermissionArr.map(a => ({ ...a }));\n      }\n    }\n  }\n\n  filterData(event, type) {\n    const val = event.target.value;\n    if (event.target.value) {\n      this.role = val;\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RolePermissionComponent } from './role-permission.component';\nimport { RouterModule } from '@angular/router';\nimport { ButtonModule, CardModule, FormModule, GridModule, TabsetModule } from '@coreui/angular';\nimport { IconModule } from '@coreui/icons-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nconst route = [\n  {\n    path: '',\n    data: {\n      title: 'Role-permission',\n    },\n    children: [\n      {\n        path: '',\n        redirectTo: 'role-permission',\n      },\n      {\n        path: '',\n        data: {\n          title: '',\n        },\n        component: RolePermissionComponent\n      },\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [\n    RolePermissionComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n    CardModule,\n    IconModule,\n    GridModule,\n    FormsModule,\n    ButtonModule,\n    ReactiveFormsModule,\n    FormModule\n  ]\n})\nexport class RolePermissionModule { }\n","export default \"<div class=\\\"fade-in\\\">\\n    <c-row>\\n        <c-col md=\\\"12\\\">\\n            <c-card>\\n                <c-card-header>\\n                    <strong>Role Wise Permission</strong>\\n                </c-card-header>\\n                <c-card-body>\\n                    <form class=\\\"form-horizontal needs-validation\\\" [formGroup]=\\\"permissionForm\\\" novalidate>\\n                        <c-form-group cRow>\\n                            <label cLabel=\\\"col\\\" cCol md=\\\"3\\\" for=\\\"text-input\\\">Role</label>\\n                            <c-col md=\\\"9\\\">\\n                                <select cSelect id=\\\"select1\\\" (change)=\\\"changeRole()\\\" formControlName=\\\"role\\\">\\n                                    <option value='' selected>Choose Role</option>\\n                                    <option [value]=\\\"role\\\" *ngFor=\\\"let role of roleArr\\\"> {{role}}\\n                                    </option>\\n                                </select>\\n                                <div *ngIf=\\\"submitted && f['role'].invalid\\\" class=\\\"invalid-feedback d-block\\\">\\n                                    <div *ngIf=\\\"f['role'].errors.required\\\">\\n                                        {{formErrors.role.required}}\\n                                    </div>\\n                                </div>\\n                            </c-col>\\n                        </c-form-group>\\n                        <c-form-group cRow class=\\\"text-editor\\\">\\n                            <label cLabel=\\\"col\\\" cCol md=\\\"3\\\" for=\\\"text-input\\\">Permission</label>\\n                            <c-col md=\\\"9\\\">\\n                                <c-form-check inline custom variant=\\\"checkbox\\\" class=\\\"mfe-3\\\"\\n                                    *ngFor=\\\"let permission of permissionArr; let i = index;\\\">\\n                                    <!-- <c-col md=\\\"9\\\"> -->\\n                                    <input cInput formControlName=\\\"permissions\\\" type=\\\"checkbox\\\"\\n                                        id=\\\"permission{{permission.slug}}\\\" (change)=\\\"changeCheckbox(i)\\\" value=\\\"option1\\\"\\n                                        name=\\\"permissionOptions\\\" [checked]=\\\"permission.checked\\\"\\n                                        class=\\\"custom-control-input\\\">\\n                                    <label class=\\\"custom-control-label\\\" for=\\\"permission{{permission.slug}}\\\">\\n                                        {{permission.name}}</label>\\n                                </c-form-check>\\n                                <!-- <div *ngIf=\\\"submitted && f['permissions'].invalid\\\" class=\\\"invalid-feedback d-block\\\">\\n                                    <div *ngIf=\\\"f['permissions'].errors.required\\\">\\n                                        {{formErrors.permissions.required}}\\n                                    </div>\\n                                </div> -->\\n                            </c-col>\\n                        </c-form-group>\\n                    </form>\\n                </c-card-body>\\n                <c-card-footer>\\n                    <button cButton type=\\\"submit\\\" color=\\\"primary\\\" size=\\\"md\\\" class=\\\"mfe-1\\\" (click)=\\\"save()\\\">\\n                        <c-icon name=\\\"cil-check-circle\\\" size=\\\"sm\\\"></c-icon>\\n                        <span> Submit</span>\\n                    </button>\\n                </c-card-footer>\\n                <div class=\\\"massegeCls\\\"\\n                    [ngClass]=\\\"{'errorRes' : gs.resMassage.status == 'error', 'succassRes' : gs.resMassage.status == 'success'}\\\">\\n                    {{gs.resMassage.massage || ''}}\\n                </div>\\n            </c-card>\\n        </c-col>\\n    </c-row>\\n</div>\";","export default \".form-check {\\n  margin-bottom: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3JvbGUtcGVybWlzc2lvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFBO0FBQ0oiLCJmaWxlIjoicm9sZS1wZXJtaXNzaW9uLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZvcm0tY2hlY2t7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbi8vIC5mb3JtLWNoZWNrLWlucHV0e1xuLy8gICAgIG1hcmdpbjogNXB4O1xuLy8gfSJdfQ== */\";"]}